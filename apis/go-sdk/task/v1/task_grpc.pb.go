// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: v1/task.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TaskServiceClient is the client API for TaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskServiceClient interface {
	CreateTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error)
	GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*Task, error)
	UpdateTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error)
	DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetLastN(ctx context.Context, in *GetLastNRequest, opts ...grpc.CallOption) (*TaskList, error)
	GetExpired(ctx context.Context, in *GetExpiredRequest, opts ...grpc.CallOption) (*TaskList, error)
	PostReminder(ctx context.Context, in *PostReminderRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CreateScheduledJob(ctx context.Context, in *CreateScheduledJobRequest, opts ...grpc.CallOption) (*ScheduledJobResponse, error)
	UpdateScheduledJob(ctx context.Context, in *UpdateScheduledJobRequest, opts ...grpc.CallOption) (*ScheduledJobResponse, error)
	PauseScheduledJob(ctx context.Context, in *ScheduledJobOperationRequest, opts ...grpc.CallOption) (*ScheduledJobResponse, error)
	ResumeScheduledJob(ctx context.Context, in *ScheduledJobOperationRequest, opts ...grpc.CallOption) (*ScheduledJobResponse, error)
	DeleteScheduledJob(ctx context.Context, in *ScheduledJobOperationRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ListScheduledJobs(ctx context.Context, in *ListScheduledJobsRequest, opts ...grpc.CallOption) (*JobList, error)
	RunScheduledJob(ctx context.Context, in *ScheduledJobOperationRequest, opts ...grpc.CallOption) (*ScheduledJobResponse, error)
}

type taskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskServiceClient(cc grpc.ClientConnInterface) TaskServiceClient {
	return &taskServiceClient{cc}
}

func (c *taskServiceClient) CreateTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/task.TaskService/CreateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/task.TaskService/GetTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) UpdateTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/task.TaskService/UpdateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/task.TaskService/DeleteTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetLastN(ctx context.Context, in *GetLastNRequest, opts ...grpc.CallOption) (*TaskList, error) {
	out := new(TaskList)
	err := c.cc.Invoke(ctx, "/task.TaskService/GetLastN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetExpired(ctx context.Context, in *GetExpiredRequest, opts ...grpc.CallOption) (*TaskList, error) {
	out := new(TaskList)
	err := c.cc.Invoke(ctx, "/task.TaskService/GetExpired", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) PostReminder(ctx context.Context, in *PostReminderRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/task.TaskService/PostReminder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) CreateScheduledJob(ctx context.Context, in *CreateScheduledJobRequest, opts ...grpc.CallOption) (*ScheduledJobResponse, error) {
	out := new(ScheduledJobResponse)
	err := c.cc.Invoke(ctx, "/task.TaskService/CreateScheduledJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) UpdateScheduledJob(ctx context.Context, in *UpdateScheduledJobRequest, opts ...grpc.CallOption) (*ScheduledJobResponse, error) {
	out := new(ScheduledJobResponse)
	err := c.cc.Invoke(ctx, "/task.TaskService/UpdateScheduledJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) PauseScheduledJob(ctx context.Context, in *ScheduledJobOperationRequest, opts ...grpc.CallOption) (*ScheduledJobResponse, error) {
	out := new(ScheduledJobResponse)
	err := c.cc.Invoke(ctx, "/task.TaskService/PauseScheduledJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) ResumeScheduledJob(ctx context.Context, in *ScheduledJobOperationRequest, opts ...grpc.CallOption) (*ScheduledJobResponse, error) {
	out := new(ScheduledJobResponse)
	err := c.cc.Invoke(ctx, "/task.TaskService/ResumeScheduledJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) DeleteScheduledJob(ctx context.Context, in *ScheduledJobOperationRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/task.TaskService/DeleteScheduledJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) ListScheduledJobs(ctx context.Context, in *ListScheduledJobsRequest, opts ...grpc.CallOption) (*JobList, error) {
	out := new(JobList)
	err := c.cc.Invoke(ctx, "/task.TaskService/ListScheduledJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) RunScheduledJob(ctx context.Context, in *ScheduledJobOperationRequest, opts ...grpc.CallOption) (*ScheduledJobResponse, error) {
	out := new(ScheduledJobResponse)
	err := c.cc.Invoke(ctx, "/task.TaskService/RunScheduledJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskServiceServer is the server API for TaskService service.
// All implementations must embed UnimplementedTaskServiceServer
// for forward compatibility
type TaskServiceServer interface {
	CreateTask(context.Context, *Task) (*Task, error)
	GetTask(context.Context, *GetTaskRequest) (*Task, error)
	UpdateTask(context.Context, *Task) (*Task, error)
	DeleteTask(context.Context, *DeleteTaskRequest) (*empty.Empty, error)
	GetLastN(context.Context, *GetLastNRequest) (*TaskList, error)
	GetExpired(context.Context, *GetExpiredRequest) (*TaskList, error)
	PostReminder(context.Context, *PostReminderRequest) (*empty.Empty, error)
	CreateScheduledJob(context.Context, *CreateScheduledJobRequest) (*ScheduledJobResponse, error)
	UpdateScheduledJob(context.Context, *UpdateScheduledJobRequest) (*ScheduledJobResponse, error)
	PauseScheduledJob(context.Context, *ScheduledJobOperationRequest) (*ScheduledJobResponse, error)
	ResumeScheduledJob(context.Context, *ScheduledJobOperationRequest) (*ScheduledJobResponse, error)
	DeleteScheduledJob(context.Context, *ScheduledJobOperationRequest) (*empty.Empty, error)
	ListScheduledJobs(context.Context, *ListScheduledJobsRequest) (*JobList, error)
	RunScheduledJob(context.Context, *ScheduledJobOperationRequest) (*ScheduledJobResponse, error)
	mustEmbedUnimplementedTaskServiceServer()
}

// UnimplementedTaskServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTaskServiceServer struct {
}

func (UnimplementedTaskServiceServer) CreateTask(context.Context, *Task) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedTaskServiceServer) GetTask(context.Context, *GetTaskRequest) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedTaskServiceServer) UpdateTask(context.Context, *Task) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTask not implemented")
}
func (UnimplementedTaskServiceServer) DeleteTask(context.Context, *DeleteTaskRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (UnimplementedTaskServiceServer) GetLastN(context.Context, *GetLastNRequest) (*TaskList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastN not implemented")
}
func (UnimplementedTaskServiceServer) GetExpired(context.Context, *GetExpiredRequest) (*TaskList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExpired not implemented")
}
func (UnimplementedTaskServiceServer) PostReminder(context.Context, *PostReminderRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostReminder not implemented")
}
func (UnimplementedTaskServiceServer) CreateScheduledJob(context.Context, *CreateScheduledJobRequest) (*ScheduledJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScheduledJob not implemented")
}
func (UnimplementedTaskServiceServer) UpdateScheduledJob(context.Context, *UpdateScheduledJobRequest) (*ScheduledJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScheduledJob not implemented")
}
func (UnimplementedTaskServiceServer) PauseScheduledJob(context.Context, *ScheduledJobOperationRequest) (*ScheduledJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseScheduledJob not implemented")
}
func (UnimplementedTaskServiceServer) ResumeScheduledJob(context.Context, *ScheduledJobOperationRequest) (*ScheduledJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeScheduledJob not implemented")
}
func (UnimplementedTaskServiceServer) DeleteScheduledJob(context.Context, *ScheduledJobOperationRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScheduledJob not implemented")
}
func (UnimplementedTaskServiceServer) ListScheduledJobs(context.Context, *ListScheduledJobsRequest) (*JobList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListScheduledJobs not implemented")
}
func (UnimplementedTaskServiceServer) RunScheduledJob(context.Context, *ScheduledJobOperationRequest) (*ScheduledJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunScheduledJob not implemented")
}
func (UnimplementedTaskServiceServer) mustEmbedUnimplementedTaskServiceServer() {}

// UnsafeTaskServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskServiceServer will
// result in compilation errors.
type UnsafeTaskServiceServer interface {
	mustEmbedUnimplementedTaskServiceServer()
}

func RegisterTaskServiceServer(s grpc.ServiceRegistrar, srv TaskServiceServer) {
	s.RegisterService(&TaskService_ServiceDesc, srv)
}

func _TaskService_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.TaskService/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).CreateTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.TaskService/GetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetTask(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.TaskService/UpdateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).UpdateTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.TaskService/DeleteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).DeleteTask(ctx, req.(*DeleteTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetLastN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetLastN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.TaskService/GetLastN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetLastN(ctx, req.(*GetLastNRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetExpired_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExpiredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetExpired(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.TaskService/GetExpired",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetExpired(ctx, req.(*GetExpiredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_PostReminder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostReminderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).PostReminder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.TaskService/PostReminder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).PostReminder(ctx, req.(*PostReminderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_CreateScheduledJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScheduledJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).CreateScheduledJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.TaskService/CreateScheduledJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).CreateScheduledJob(ctx, req.(*CreateScheduledJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_UpdateScheduledJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScheduledJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).UpdateScheduledJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.TaskService/UpdateScheduledJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).UpdateScheduledJob(ctx, req.(*UpdateScheduledJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_PauseScheduledJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduledJobOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).PauseScheduledJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.TaskService/PauseScheduledJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).PauseScheduledJob(ctx, req.(*ScheduledJobOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_ResumeScheduledJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduledJobOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).ResumeScheduledJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.TaskService/ResumeScheduledJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).ResumeScheduledJob(ctx, req.(*ScheduledJobOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_DeleteScheduledJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduledJobOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).DeleteScheduledJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.TaskService/DeleteScheduledJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).DeleteScheduledJob(ctx, req.(*ScheduledJobOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_ListScheduledJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListScheduledJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).ListScheduledJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.TaskService/ListScheduledJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).ListScheduledJobs(ctx, req.(*ListScheduledJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_RunScheduledJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduledJobOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).RunScheduledJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.TaskService/RunScheduledJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).RunScheduledJob(ctx, req.(*ScheduledJobOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskService_ServiceDesc is the grpc.ServiceDesc for TaskService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "task.TaskService",
	HandlerType: (*TaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTask",
			Handler:    _TaskService_CreateTask_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _TaskService_GetTask_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _TaskService_UpdateTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _TaskService_DeleteTask_Handler,
		},
		{
			MethodName: "GetLastN",
			Handler:    _TaskService_GetLastN_Handler,
		},
		{
			MethodName: "GetExpired",
			Handler:    _TaskService_GetExpired_Handler,
		},
		{
			MethodName: "PostReminder",
			Handler:    _TaskService_PostReminder_Handler,
		},
		{
			MethodName: "CreateScheduledJob",
			Handler:    _TaskService_CreateScheduledJob_Handler,
		},
		{
			MethodName: "UpdateScheduledJob",
			Handler:    _TaskService_UpdateScheduledJob_Handler,
		},
		{
			MethodName: "PauseScheduledJob",
			Handler:    _TaskService_PauseScheduledJob_Handler,
		},
		{
			MethodName: "ResumeScheduledJob",
			Handler:    _TaskService_ResumeScheduledJob_Handler,
		},
		{
			MethodName: "DeleteScheduledJob",
			Handler:    _TaskService_DeleteScheduledJob_Handler,
		},
		{
			MethodName: "ListScheduledJobs",
			Handler:    _TaskService_ListScheduledJobs_Handler,
		},
		{
			MethodName: "RunScheduledJob",
			Handler:    _TaskService_RunScheduledJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/task.proto",
}
